package mx.com.diegoA.vistas.vistaPresupuesto;

import mx.com.diegoA.vistas.vistaCliente.*;
import java.awt.Dialog;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import mx.com.diegoA.control.Icontrol.IManager;
import mx.com.diegoA.control.conexion.ctrlConexion;
import mx.com.diegoA.control.control.CtrlConfCliente;
import mx.com.diegoA.control.control.CtrlConfDireccion;
import mx.com.diegoA.control.control.CtrlConfProducto;
import mx.com.diegoA.control.control.CtrlVenTrabajo;
import mx.com.diegoA.entidad.entity.ConfCliente;
import mx.com.diegoA.entidad.entity.ConfEstadoGlobal;
import mx.com.diegoA.entidad.entity.ConfProducto;
import mx.com.diegoA.entidad.entity.VenPresupuesto;
import mx.com.diegoA.entidad.entity.VenTrabajo;
import mx.com.diegoA.vistas.vistaTrabajo.JdTrabajoManager;

public class JdPresupuestoManager extends javax.swing.JDialog implements IManager {

    //<editor-fold defaultstate="collapsed" desc="Cuerpo Cliente Manager">
    //<editor-fold defaultstate="collapsed" desc="Variables">
    private ctrlConexion conexion;
    private VenPresupuesto baseEntity;
    private CtrlVenTrabajo Trabajo;
    private VenTrabajo entTrab;
    private int idDireccion;
    private int idCliente = 0;
    private int idSexo;
    private int filac;
    private int idAccion = 0;
    private boolean camTxt = false;
    private boolean camCombo = false;
    private boolean camJTable = false;
    boolean conCambios = false;
    PreparedStatement consulta;
    ResultSet rConsulta;
    DefaultTableModel modTabla;
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Constructor">
    /**
     * Creates new form JdClienteManager
     */
    public JdPresupuestoManager(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public JdPresupuestoManager() throws SQLException {
        initComponents();
        this.setLocationRelativeTo(null);
        conexion = new ctrlConexion();
        this.setLoadInformation();
        String[] head = {"ID", "idPresupuesto", "IdConfProducto", "producto", "alto", "ancho"};
        Object[][] direccionrow = {};
        modTabla = new DefaultTableModel(direccionrow, head);
        this.jtDireccion.setModel(modTabla);
//        jtDireccion.getColumn("ID").setPreferredWidth(0);
//        jtDireccion.getColumn("ID").setMinWidth(0);
//        jtDireccion.getColumn("ID").setMaxWidth(0);
//        jtDireccion.getColumn("ID").setWidth(0);
//        jtDireccion.getColumn("idCliente").setPreferredWidth(0);
//        jtDireccion.getColumn("idCliente").setMinWidth(0);
//        jtDireccion.getColumn("idCliente").setMaxWidth(0);
//        jtDireccion.getColumn("idCliente").setWidth(0);
//        jtDireccion.getColumn("IdEstado").setPreferredWidth(0);
//        jtDireccion.getColumn("IdEstado").setMinWidth(0);
//        jtDireccion.getColumn("IdEstado").setMaxWidth(0);
//        jtDireccion.getColumn("IdEstado").setWidth(0);
//        jtDireccion.getColumn("IdMunicipio").setPreferredWidth(0);
//        jtDireccion.getColumn("IdMunicipio").setMinWidth(0);
//        jtDireccion.getColumn("IdMunicipio").setMaxWidth(0);
//        jtDireccion.getColumn("IdMunicipio").setWidth(0);
    }
    //</editor-fold>

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAceptar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtDireccion = new javax.swing.JTable();
        txtnombre = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblAccion = new javax.swing.JLabel();
        btnAgregarD = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        cbSexo = new javax.swing.JComboBox();
        btnEditar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        btnAceptar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnAceptar.setForeground(new java.awt.Color(51, 51, 51));
        btnAceptar.setText("Aceptar");
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        btnCancelar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnCancelar.setForeground(new java.awt.Color(51, 51, 51));
        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        jtDireccion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtDireccion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtDireccionMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtDireccion);

        txtnombre.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtnombreMouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("Nombre:");

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mx/com/diegoA/img/1412742115_User_info.png"))); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 51, 51));
        jLabel5.setText("Presupuesto-");

        lblAccion.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblAccion.setForeground(new java.awt.Color(51, 51, 51));
        lblAccion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAccion.setText("Estado de operacion");

        btnAgregarD.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnAgregarD.setForeground(new java.awt.Color(51, 51, 51));
        btnAgregarD.setText("Agregar Producto");
        btnAgregarD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarDActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(102, 102, 102));
        jLabel6.setText("Cliente:");

        cbSexo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnEditar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnEditar.setForeground(new java.awt.Color(51, 51, 51));
        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnEliminar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnEliminar.setForeground(new java.awt.Color(51, 51, 51));
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblAccion, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAgregarD)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbSexo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtnombre, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addGap(26, 26, 26))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAceptar)
                .addGap(18, 18, 18)
                .addComponent(btnCancelar)
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(lblAccion))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtnombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbSexo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregarD)
                    .addComponent(btnEditar)
                    .addComponent(btnEliminar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAceptar)
                    .addComponent(btnCancelar))
                .addGap(34, 34, 34))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //<editor-fold defaultstate="collapsed" desc="Botones y Eventos">
    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
        try {
            this.DetectaCambioCombo();
            if (camCombo == true || camTxt == true || camJTable == true) {
                int res = JOptionPane.showConfirmDialog(null, "Has realizado Cambio, estas seguro de guardarlos");
                if (res == 0) {
                    JOptionPane.showMessageDialog(null, "Hubo un Cambio");
                    if (this.validaDatos() == true) {
                        this.baseEntity.setStrValor(this.txtnombre.getText().trim());
                        //aqui falta la linea para obtener el combo seleccionado
                        if (this.idAccion == 0) {
                            ConfCliente cliente = (ConfCliente) this.cbSexo.getSelectedItem();
                            this.idSexo = cliente.getId();
                            this.baseEntity.setIdConfCliente(this.idSexo);
                        } else {
                            ConfCliente cliente = (ConfCliente) this.cbSexo.getSelectedItem();
                            this.idSexo = cliente.getId();
                            this.baseEntity.setIdConfCliente(this.idSexo);
                        }
                        //Generamos y guardamos el arraylist de direccion y lo mandamos de regreso              
                        ArrayList<VenTrabajo> lista = new ArrayList();
                        //aqui iba confdir
                        for (int i = 0; i < this.jtDireccion.getRowCount(); i++) {
                            this.entTrab = new VenTrabajo();
                            entTrab.setId((int) this.jtDireccion.getValueAt(i, 0));
                            entTrab.setIdConfProducto((int) this.jtDireccion.getValueAt(i, 2));
                            entTrab.setMedLargo((Double) this.jtDireccion.getValueAt(i, 4));
                            entTrab.setMedAncho((Double) this.jtDireccion.getValueAt(i, 5));
                            entTrab.setIdVenPresupuesto((int) this.jtDireccion.getValueAt(i, 1));
                            lista.add(entTrab);
                        }
                        this.baseEntity.setTrabajo(lista);
                        //se cierra la pantalla
                        this.conCambios = false;
                        this.camCombo = false;
                        this.camJTable = false;
                        this.camTxt = false;
                        this.dispose();
                    }
                }
            } else {
                this.dispose();
            }

        } catch (Exception e) {
            System.out.println(e.getMessage());
            System.out.println(e.getLocalizedMessage());
        }
    }//GEN-LAST:event_btnAceptarActionPerformed

    private void btnAgregarDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarDActionPerformed
        // Agregar Direccion
        try {
 this.camJTable = true;
            JdTrabajoManager manager;
            CtrlConfDireccion ctrlDir;
            ctrlDir = new CtrlConfDireccion();
            manager = new JdTrabajoManager();
            Object objTemp = manager.showDialog(null);
            VenTrabajo conf = (VenTrabajo) objTemp;

            CtrlConfProducto estado = new CtrlConfProducto();
            ArrayList<Object> lista = estado.ConsultaParaManager(conf.getIdConfProducto());
            ConfProducto tempObject = (ConfProducto) lista.get(0);

            if (objTemp != null) {
                //Verificamos
                Object cuerpo[] = {0, this.idCliente, conf.getIdConfProducto(), tempObject, conf.getMedLargo(), conf.getMedAncho()};
                this.modTabla.addRow(cuerpo);
//                System.out.println(""+muni.getNombre()+estado.getNombre());

            }
            //actualiza los datos del jtable de resultado

            this.jtDireccion.setRowSelectionInterval(0, 0);
        } catch (SQLException ex) {
            Logger.getLogger(JdPresupuestoManager.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnAgregarDActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        // Edita una direccion
        
        int numerofilas = this.jtDireccion.getRowCount();
        System.out.println("El numero de filas es: " + numerofilas);
        if (this.jtDireccion.getRowCount() > 0) {
            try {
                 this.camJTable = true;
                JdTrabajoManager mngrDir = new JdTrabajoManager();
                VenTrabajo direccion = new VenTrabajo();
                this.filac = this.jtDireccion.getSelectedRow();
                direccion.setId((int) this.jtDireccion.getValueAt(filac, 0));
                direccion.setMedLargo((Double) this.jtDireccion.getValueAt(filac, 4));
                direccion.setMedAncho((Double) this.jtDireccion.getValueAt(filac, 5));
                direccion.setIdConfProducto((int) this.jtDireccion.getValueAt(filac, 2));
                direccion.setIdVenPresupuesto(this.idCliente);
                Object objTemp = mngrDir.showDialog(direccion);
                VenTrabajo conf = (VenTrabajo) objTemp;
                if (conf != null) {
                    CtrlConfProducto estado = new CtrlConfProducto();
                    ArrayList<Object> lista = estado.ConsultaParaManager(conf.getIdConfProducto());
                    ConfProducto tempObject = (ConfProducto) lista.get(0);

                    this.jtDireccion.setValueAt(conf.getMedLargo(), filac, 4);
                    this.jtDireccion.setValueAt(conf.getMedAncho(), filac, 5);
                    this.jtDireccion.setValueAt(conf.getIdConfProducto(), filac, 2);
                    this.jtDireccion.setValueAt(tempObject, filac, 3);
//                    jtDireccion.getColumn("ID").setPreferredWidth(0);
//                    jtDireccion.getColumn("ID").setMinWidth(0);
//                    jtDireccion.getColumn("ID").setMaxWidth(0);
//                    jtDireccion.getColumn("ID").setWidth(0);
//                    jtDireccion.getColumn("idCliente").setPreferredWidth(0);
//                    jtDireccion.getColumn("idCliente").setMinWidth(0);
//                    jtDireccion.getColumn("idCliente").setMaxWidth(0);
//                    jtDireccion.getColumn("idCliente").setWidth(0);
//                    jtDireccion.getColumn("IdEstado").setPreferredWidth(0);
//                    jtDireccion.getColumn("IdEstado").setMinWidth(0);
//                    jtDireccion.getColumn("IdEstado").setMaxWidth(0);
//                    jtDireccion.getColumn("IdEstado").setWidth(0);
//                    jtDireccion.getColumn("IdMunicipio").setPreferredWidth(0);
//                    jtDireccion.getColumn("IdMunicipio").setMinWidth(0);
//                    jtDireccion.getColumn("IdMunicipio").setMaxWidth(0);
//                    jtDireccion.getColumn("IdMunicipio").setWidth(0);
                }

            } catch (SQLException ex) {
                Logger.getLogger(JdPresupuestoManager.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "No hay Trabajos que editar", "Trabajos", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // Devuelve null
        this.baseEntity = null;
        this.dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // Elimina
        if (this.jtDireccion.getRowCount() > 0) {
            if (this.idDireccion > 0) {
                int eliminar = JOptionPane.showConfirmDialog(null, "Estas seguro de eliminar el trabajo", "Trabajo registrado", JOptionPane.WARNING_MESSAGE);
                if (eliminar == 0) {
                    try {
                         this.camJTable = true;
                        Trabajo = new CtrlVenTrabajo();
                        VenTrabajo entDir = new VenTrabajo();
                        entDir.setId(this.idDireccion);
                        if (Trabajo.Eliminar(entDir)) {
                            int elFila = this.jtDireccion.getSelectedRow();
                            this.modTabla.removeRow(elFila);
                            JOptionPane.showMessageDialog(null, "Registro borrado exitosamente", "Trabajo", JOptionPane.INFORMATION_MESSAGE);
                        }
                    } catch (SQLException ex) {
                        Logger.getLogger(JdPresupuestoManager.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } else {
                 this.camJTable = true;
                int elFila = this.jtDireccion.getSelectedRow();
                this.modTabla.removeRow(elFila);
            }
        } else {
            JOptionPane.showMessageDialog(null, "No hay direcciones que borrar", "Direccion", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void jtDireccionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtDireccionMouseClicked
        // Asigna el id de la fila seleccionada
        if (this.jtDireccion.getRowCount() != -1) {
            int filadir = this.jtDireccion.getSelectedRow();
            this.idDireccion = (int) this.jtDireccion.getValueAt(filadir, 0);
            this.idCliente = (int) this.jtDireccion.getValueAt(filadir, 1);
            System.out.println(this.idDireccion);
        }
    }//GEN-LAST:event_jtDireccionMouseClicked

    private void txtnombreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtnombreMouseClicked
        // se llama al evento de cambio
        this.DetectaCambio(this.txtnombre);
    }//GEN-LAST:event_txtnombreMouseClicked
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Main"> 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JdClienteManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JdClienteManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JdClienteManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JdClienteManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JdClienteManager dialog = new JdClienteManager(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Declaracion de componentes">

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnAgregarD;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JComboBox cbSexo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtDireccion;
    private javax.swing.JLabel lblAccion;
    private javax.swing.JTextField txtnombre;
    // End of variables declaration//GEN-END:variables
//</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Metodos Implementar">
    @Override
    public Object showDialog(Object _obj) {
        this.baseEntity = (VenPresupuesto) _obj;
        this.idAccion = (this.baseEntity != null) ? this.baseEntity.getId() : 0;
        if (this.idAccion == 0) {
            this.baseEntity = new VenPresupuesto();
        }
        this.idSexo = this.baseEntity.getIdConfCliente();//obtener el id de estado para el combo de editar
        this.setLoadInformation();
        this.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);
        //this.setBounds(600, 500, 500, 500);
        this.setVisible(true);
        return (this.baseEntity != null) ? this.baseEntity : null;
    }

    @Override
    public boolean validaDatos() {
        if (this.txtnombre.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "El campo de nombre se encuentra vacio");
            return false;
        }
        if (this.idAccion == 0) {
            if (this.cbSexo.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Seleccione una opción valida de Sexo");
                return false;
            }
        }
        return true;
    }

    @Override
    public void setInformacion(int _id) {
        if (_id == 0) {
            this.lblAccion.setText("[Agregar]");
        } else {
            this.lblAccion.setText("[Editar]");
        }
    }

    @Override
    public void setEstatus() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Object getInformacion() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean setComboBoxInitial() {
        DefaultComboBoxModel x = new DefaultComboBoxModel();
        try {
            CtrlConfCliente cCliente = new CtrlConfCliente();

            ArrayList<Object> lista = cCliente.ConsultaCompleja();

            if (this.idAccion == 0) {
                //leyenda seleccionar
                x.addElement("SELECCIONA");
                for (int i = 0; i < lista.size(); i++) {
                    ConfCliente cliente = (ConfCliente) lista.get(i);
                    x.addElement(cliente);
                }

                cbSexo.setModel(x);
            } else {
                for (int i = 0; i < lista.size(); i++) {
                    ConfCliente cliente = (ConfCliente) lista.get(i);
                    x.addElement(cliente);
                }

                cbSexo.setModel(x);
                this.setComboBox();
            }

            return true;
        } catch (SQLException ex) {
            Logger.getLogger(JdPresupuestoManager.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
    }

    @Override
    public boolean setLoadInformation() {
        this.setInformacion(this.idAccion);
        if (this.setComboBoxInitial() == false) {
            this.dispose();
        }
        this.setTextField();
        this.setComboBox();
        this.setTabla();
        this.setFecha();
        this.setCheck();
        this.setExtra();

        return true;
    }

    @Override
    public void setComboBox() {
        if (this.idAccion > 0) {
            for (int i = 0; i < this.cbSexo.getItemCount(); i++) {
                ConfCliente cliente = (ConfCliente) this.cbSexo.getItemAt(i);
                if (cliente.getId() == this.baseEntity.getIdConfCliente()) {
                    this.cbSexo.setSelectedIndex(i);
                }
            }
        }
    }

    @Override
    public void setTextField() {
        this.txtnombre.setText(((this.baseEntity != null) ? this.baseEntity.getStrValor() : " "));

    }

    @Override
    public void setFecha() {

    }

    @Override
    public void setTabla() {
        if (this.idAccion != 0) {
            try {

                CtrlVenTrabajo ctrldir = new CtrlVenTrabajo();
                VenTrabajo direcciones = new VenTrabajo();
                ArrayList<Object> lista = ctrldir.ConsultaCompleja(this.idAccion);

                for (int i = 0; i < lista.size(); i++) {
                    Object[] filaTemp = new Object[8];
                    VenTrabajo tempObject = (VenTrabajo) lista.get(i);

                    CtrlConfProducto estado = new CtrlConfProducto();
                    ArrayList<Object> lista2 = estado.ConsultaParaManager(tempObject.getIdConfProducto());
                    ConfProducto tempObject2 = (ConfProducto) lista2.get(0);

//                    CtrlConfMunicipios muni = new CtrlConfMunicipios();
//                    ArrayList<Object> lista3 = muni.ConsultaEspecializada(tempObject.getIdConfMunicipio());
//                    ConfMunicipios tempObject3 = (ConfMunicipios) lista3.get(0);
                    filaTemp[0] = tempObject.getId();
                    filaTemp[1] = tempObject.getIdVenPresupuesto();
                    filaTemp[2] = tempObject.getIdConfProducto();
                    filaTemp[3] = tempObject2;
                    filaTemp[4] = tempObject.getMedLargo();
                    filaTemp[5] = tempObject.getMedAncho();

                    modTabla.addRow(filaTemp);
                    this.jtDireccion.setModel(modTabla);

                    jtDireccion.getColumn("ID").setPreferredWidth(0);
                    jtDireccion.getColumn("ID").setMinWidth(0);
                    jtDireccion.getColumn("ID").setMaxWidth(0);
                    jtDireccion.getColumn("ID").setWidth(0);
//                    jtDireccion.getColumn("idCliente").setPreferredWidth(0);
//                    jtDireccion.getColumn("idCliente").setMinWidth(0);
//                    jtDireccion.getColumn("idCliente").setMaxWidth(0);
//                    jtDireccion.getColumn("idCliente").setWidth(0);
//                    jtDireccion.getColumn("IdEstado").setPreferredWidth(0);
//                    jtDireccion.getColumn("IdEstado").setMinWidth(0);
//                    jtDireccion.getColumn("IdEstado").setMaxWidth(0);
//                    jtDireccion.getColumn("IdEstado").setWidth(0);
//                    jtDireccion.getColumn("IdMunicipio").setPreferredWidth(0);
//                    jtDireccion.getColumn("IdMunicipio").setMinWidth(0);
//                    jtDireccion.getColumn("IdMunicipio").setMaxWidth(0);
//                    jtDireccion.getColumn("IdMunicipio").setWidth(0);
                }
            } catch (SQLException ex) {
                Logger.getLogger(JdClienteManager.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }

    @Override
    public void setCheck() {

    }

    @Override
    public void setRadio() {

    }

    @Override
    public void setExtra() {

    }

    @Override
    public void huboCambio() {

    }

    //<editor-fold defaultstate="collapsed" desc="Detecta cambio combo: Evento">
    private void DetectaCambioCombo() {
        if (this.idAccion == 0) {
            if (this.cbSexo.getSelectedIndex() >= 0) {
                this.camCombo = true;
            }

        } else if (this.idAccion > 0) {

            ConfCliente x = (ConfCliente) cbSexo.getSelectedItem();
            System.out.println(x.getId() + this.baseEntity.getIdConfCliente());
            if (x.getId() != this.baseEntity.getIdConfCliente()) {
                this.camCombo = true;
            }
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Detecta cambio JTArea">
    private void DetectaCambioJTArea(JTextArea txt) {
        DocumentListener documentListener = new DocumentListener() {

            @Override
            public void changedUpdate(DocumentEvent documentEvent) {
                camTxt = true;
            }

            @Override
            public void insertUpdate(DocumentEvent documentEvent) {
                camTxt = true;
            }

            @Override
            public void removeUpdate(DocumentEvent documentEvent) {
                camTxt = true;
            }
        };
        txt.getDocument().addDocumentListener(documentListener);
    }
//</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Detecta cambio JTField ">
    private void DetectaCambio(JTextField txt) {
        DocumentListener documentListener = new DocumentListener() {

            @Override
            public void changedUpdate(DocumentEvent documentEvent) {
                camTxt = true;
            }

            @Override
            public void insertUpdate(DocumentEvent documentEvent) {
                camTxt = true;
            }

            @Override
            public void removeUpdate(DocumentEvent documentEvent) {
                camTxt = true;
            }
        };
        txt.getDocument().addDocumentListener(documentListener);

    }
    //</editor-fold>
    //</editor-fold>
//</editor-fold>
}

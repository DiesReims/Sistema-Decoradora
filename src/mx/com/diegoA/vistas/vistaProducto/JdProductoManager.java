package mx.com.diegoA.vistas.vistaProducto;

import mx.com.diegoA.vistas.vistaColección.*;
import mx.com.diegoA.vistas.vistaMarca.*;
import java.awt.Dialog;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import mx.com.diegoA.control.Icontrol.IManager;
import mx.com.diegoA.control.conexion.ctrlConexion;
import mx.com.diegoA.control.control.CtrlConfColor;
import mx.com.diegoA.control.control.CtrlConfMaterial;
import mx.com.diegoA.control.control.CtrlConfTipoProducto;
import mx.com.diegoA.control.control.ctrlconfColeccion;
import mx.com.diegoA.control.control.ctrlconfMarca;
import mx.com.diegoA.entidad.entity.ConfColeccion;
import mx.com.diegoA.entidad.entity.ConfColor;
import mx.com.diegoA.entidad.entity.ConfEstadoGlobal;
import mx.com.diegoA.entidad.entity.ConfMarca;
import mx.com.diegoA.entidad.entity.ConfMaterial;
import mx.com.diegoA.entidad.entity.ConfProducto;
import mx.com.diegoA.entidad.entity.ConfTipoProducto;

public class JdProductoManager extends javax.swing.JDialog implements IManager {

    //<editor-fold defaultstate="collapsed" desc="Cuerpo Producto Manager">
    //<editor-fold defaultstate="collapsed" desc="Variables">
    private ConfProducto baseEntity;
    private int idTipoProducto;
    private int idEstado;
    private int idColeccion;
    private int idMaterial;
    private int idColor;
    private int asignasela;
    private ctrlConexion conexion;
    private int idAccion = 0;
    boolean conCambios = false;
    private boolean camTxt = false;
    private boolean camCombo = false;
    private boolean camJTable = false;
    PreparedStatement consulta;
    ResultSet rConsulta;
    String prueba = "Hola";
    private int contadorcombo;//al cargar el combo detecta un evento y marca error esto es para evitar que se ejecute al llenarlo y que no abra
//</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Constructor">
    /**
     * Creates new form JdMarcaManager
     */
    public JdProductoManager(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public JdProductoManager() throws SQLException {
        initComponents();
        this.setLocationRelativeTo(null);
        conexion = new ctrlConexion();
        this.setLoadInformation();
    }
    //</editor-fold>

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        cmbEstado = new javax.swing.JComboBox();
        txtValor = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDescripcion = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        lblTitulo = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblAccion = new javax.swing.JLabel();
        picImage = new javax.swing.JLabel();
        btnAceptar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        cmbColeccion = new javax.swing.JComboBox();
        cmbMaterial = new javax.swing.JComboBox();
        cmbColor = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtCosto = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        cmbTipoProducto = new javax.swing.JComboBox();

        jLabel4.setText("jLabel4");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Producto");

        cmbEstado.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbEstadoItemStateChanged(evt);
            }
        });

        txtValor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtValorMouseClicked(evt);
            }
        });
        txtValor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                verificaCajaSimple(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("Nombre:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("Descripción:");

        txtDescripcion.setColumns(20);
        txtDescripcion.setRows(5);
        txtDescripcion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtDescripcionMouseClicked(evt);
            }
        });
        txtDescripcion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDescripcionKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(txtDescripcion);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("Marca:");

        lblTitulo.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        lblTitulo.setForeground(new java.awt.Color(51, 51, 51));
        lblTitulo.setText("Producto-");

        lblAccion.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblAccion.setForeground(new java.awt.Color(51, 51, 51));
        lblAccion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAccion.setText("Insertar");

        picImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mx/com/diegoA/img/1412742116_Internet.png"))); // NOI18N

        btnAceptar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnAceptar.setForeground(new java.awt.Color(51, 51, 51));
        btnAceptar.setText("Aceptar");
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        btnCancelar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnCancelar.setForeground(new java.awt.Color(51, 51, 51));
        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        jLabel5.setForeground(new java.awt.Color(255, 0, 0));
        jLabel5.setText("*");

        jLabel7.setForeground(new java.awt.Color(255, 0, 0));
        jLabel7.setText("*");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(102, 102, 102));
        jLabel8.setText("Colección:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(102, 102, 102));
        jLabel9.setText("Material:");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(102, 102, 102));
        jLabel10.setText("Color:");

        cmbColeccion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbColeccionItemStateChanged(evt);
            }
        });

        cmbMaterial.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbMaterialItemStateChanged(evt);
            }
        });

        cmbColor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbColorItemStateChanged(evt);
            }
        });

        jLabel11.setForeground(new java.awt.Color(255, 0, 0));
        jLabel11.setText("*");

        jLabel12.setForeground(new java.awt.Color(255, 0, 0));
        jLabel12.setText("*");

        jLabel13.setForeground(new java.awt.Color(255, 0, 0));
        jLabel13.setText("*");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(102, 102, 102));
        jLabel14.setText("Costo:");

        txtCosto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtCostoMouseClicked(evt);
            }
        });

        jLabel15.setForeground(new java.awt.Color(255, 0, 0));
        jLabel15.setText("*");

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(102, 102, 102));
        jLabel16.setText("T.Prod:");

        cmbTipoProducto.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbTipoProductoItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel1)
                                .addComponent(jLabel3)
                                .addComponent(jLabel10)
                                .addComponent(jLabel14)
                                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel16))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(cmbTipoProducto, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbEstado, javax.swing.GroupLayout.Alignment.LEADING, 0, 406, Short.MAX_VALUE)
                            .addComponent(txtValor, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbColeccion, javax.swing.GroupLayout.Alignment.LEADING, 0, 406, Short.MAX_VALUE)
                            .addComponent(cmbMaterial, javax.swing.GroupLayout.Alignment.LEADING, 0, 406, Short.MAX_VALUE)
                            .addComponent(cmbColor, javax.swing.GroupLayout.Alignment.LEADING, 0, 406, Short.MAX_VALUE)
                            .addComponent(txtCosto, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAceptar)
                                .addGap(20, 20, 20)
                                .addComponent(btnCancelar)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(picImage)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(325, 325, 325)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(30, 30, 30)
                                        .addComponent(lblTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(74, 74, 74)
                                        .addComponent(lblAccion, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 598, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(picImage, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTitulo)
                            .addComponent(lblAccion, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(txtCosto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel7))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel8))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jLabel11))))
                    .addComponent(cmbColeccion, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(cmbMaterial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(cmbColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(cmbTipoProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAceptar)
                    .addComponent(btnCancelar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //<editor-fold defaultstate="collapsed" desc="Botones y Eventos">
    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
        try {
            this.AccesDCCS();
            if (camCombo == true || camTxt == true || camJTable == true) {
                int res = JOptionPane.showConfirmDialog(null, "Has realizado Cambio, estas seguro de guardarlos");
                if (res == 0) {
                    JOptionPane.showMessageDialog(null, "Hubo un Cambio");
                    if (this.validaDatos() == true) {
                        this.baseEntity.setStrValor(this.txtValor.getText().trim());
                        this.baseEntity.setStrDescripcion(this.txtDescripcion.getText().trim());
                        this.baseEntity.setCurPrecio(Double.parseDouble(this.txtCosto.getText().trim()));
                        //aqui falta la linea para obtener el combo seleccionado
                        if (this.idAccion == 0) {
                            this.baseEntity.setIdConfMarca(this.idEstado);
                            ConfColeccion objTemp = (ConfColeccion) this.cmbColeccion.getSelectedItem();
                            this.baseEntity.setIdConfColeccion(objTemp.getId());
                            ConfTipoProducto objTemp1 = (ConfTipoProducto) this.cmbTipoProducto.getSelectedItem();
                            this.baseEntity.setIdConfTipoProducto(objTemp1.getId());
                            ConfMaterial objTemp2 = (ConfMaterial) this.cmbMaterial.getSelectedItem();
                            this.baseEntity.setIdConfMaterial(objTemp2.getId());
                            ConfColor objTemp3 = (ConfColor) this.cmbColor.getSelectedItem();
                            this.baseEntity.setIdConfColor(objTemp3.getId());
                        } else {
                            this.baseEntity.setIdConfMarca(this.idEstado);
                            ConfColeccion objTemp = (ConfColeccion) this.cmbColeccion.getSelectedItem();
                            this.baseEntity.setIdConfColeccion(objTemp.getId());
                            ConfTipoProducto objTemp1 = (ConfTipoProducto) this.cmbTipoProducto.getSelectedItem();
                            this.baseEntity.setIdConfTipoProducto(objTemp1.getId());
                            ConfMaterial objTemp2 = (ConfMaterial) this.cmbMaterial.getSelectedItem();
                            this.baseEntity.setIdConfMaterial(objTemp2.getId());
                            ConfColor objTemp3 = (ConfColor) this.cmbColor.getSelectedItem();
                            this.baseEntity.setIdConfColor(objTemp3.getId());
                        }
                        //se cierra la pantalla
                        this.conCambios = false;
                        this.camCombo = false;
                        this.camJTable = false;
                        this.camTxt = false;
                        this.dispose();
                    }
                }
            } else {
                this.dispose();
            }

        } catch (Exception e) {
            System.out.println(e.getMessage());
            System.out.println(e.getLocalizedMessage());
        }
    }//GEN-LAST:event_btnAceptarActionPerformed

    private void txtDescripcionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDescripcionKeyPressed

    }//GEN-LAST:event_txtDescripcionKeyPressed

    private void verificaCajaSimple(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_verificaCajaSimple
        // TODO add your handling code here:

    }//GEN-LAST:event_verificaCajaSimple

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // Boton cancelar vuelve el objeto NULL
        this.baseEntity = null;
        this.dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void cmbEstadoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbEstadoItemStateChanged
        // Para modificar el cambio de idestado (Marca)
        ConfMarca objTemp = (ConfMarca) this.cmbEstado.getSelectedItem();
        this.idEstado = objTemp.getId();
        this.Clear_Combo();
    }//GEN-LAST:event_cmbEstadoItemStateChanged

    private void cmbColeccionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbColeccionItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbColeccionItemStateChanged

    private void cmbMaterialItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbMaterialItemStateChanged
        ConfMaterial objTemp = (ConfMaterial) this.cmbMaterial.getSelectedItem();
        System.out.println("id:" + objTemp.getId() + " valor:" + objTemp.getStrValor());
        this.idMaterial = objTemp.getId();
    }//GEN-LAST:event_cmbMaterialItemStateChanged

    private void cmbColorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbColorItemStateChanged
        ConfColor objTemp = (ConfColor) this.cmbColor.getSelectedItem();
        System.out.println("id:" + objTemp.getId() + " valor:" + objTemp.getStrValor());
        this.idColor = objTemp.getId();
    }//GEN-LAST:event_cmbColorItemStateChanged

    private void cmbTipoProductoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbTipoProductoItemStateChanged
        ConfTipoProducto objTemp = (ConfTipoProducto) this.cmbTipoProducto.getSelectedItem();
        System.out.println("id:" + objTemp.getId() + " valor:" + objTemp.getStrValor());
        this.idTipoProducto = objTemp.getId();
    }//GEN-LAST:event_cmbTipoProductoItemStateChanged

    private void txtValorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtValorMouseClicked
        // Llama el evento de cambio
        this.DetectaCambio(this.txtValor);
    }//GEN-LAST:event_txtValorMouseClicked

    private void txtCostoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtCostoMouseClicked
        // Llama el evento de cambio
        this.DetectaCambio(this.txtCosto);
    }//GEN-LAST:event_txtCostoMouseClicked

    private void txtDescripcionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtDescripcionMouseClicked
        // Llama el evento de cambio
        this.DetectaCambioJTArea(this.txtDescripcion);
    }//GEN-LAST:event_txtDescripcionMouseClicked
//</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Main">
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JdMarcaManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JdMarcaManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JdMarcaManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JdMarcaManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JdProductoManager dialog = new JdProductoManager(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
//</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Declaracion de componentes">

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JComboBox cmbColeccion;
    private javax.swing.JComboBox cmbColor;
    private javax.swing.JComboBox cmbEstado;
    private javax.swing.JComboBox cmbMaterial;
    private javax.swing.JComboBox cmbTipoProducto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblAccion;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JLabel picImage;
    private javax.swing.JTextField txtCosto;
    private javax.swing.JTextArea txtDescripcion;
    private javax.swing.JTextField txtValor;
    // End of variables declaration//GEN-END:variables
//</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Metodos Implementar">
    @Override
    public Object showDialog(Object _obj) {
        this.baseEntity = (ConfProducto) _obj;
        this.idAccion = (this.baseEntity != null) ? this.baseEntity.getId() : 0;
        this.idColeccion = (this.baseEntity != null) ? this.baseEntity.getIdConfColeccion() : 0;
        this.idTipoProducto = (this.baseEntity != null) ? this.baseEntity.getIdConfTipoProducto() : 0;
        this.idMaterial = (this.baseEntity != null) ? this.baseEntity.getIdConfMaterial() : 0;
        this.idColor = (this.baseEntity != null) ? this.baseEntity.getIdConfColor() : 0;
        if (this.idAccion == 0) {
            this.baseEntity = new ConfProducto();
        }
        this.idEstado = this.baseEntity.getIdConfMarca();//obtener el id de estado para el combo de editar
        this.asignasela = this.idEstado;
        this.setLoadInformation();
        this.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);
        //this.setBounds(600, 500, 500, 500);
        this.setVisible(true);
        return (this.baseEntity != null) ? this.baseEntity : null;
    }

    @Override
    public boolean validaDatos() {
        if (this.txtValor.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "El campo de nombre se encuentra vacio");
            return false;
        }
        if (this.txtValor.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "El campo de costo se encuentra vacio");
            return false;
        }
        if (this.idAccion == 0) {
            if (this.cmbEstado.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Seleccione una opción valida de Estado");
                return false;
            }
            if (this.cmbColeccion.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Seleccione una opción valida de Colección");
                return false;
            }
            if (this.cmbMaterial.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Seleccione una opción valida de Material");
                return false;
            }
            if (this.cmbColor.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Seleccione una opción valida de Color");
                return false;
            }
            if (this.cmbTipoProducto.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Seleccione una opción valida de Tipo de producto");
                return false;
            }
        }

        return true;
    }

    @Override
    public void setInformacion(int _id) {
        if (_id == 0) {
            this.lblAccion.setText("[Agregar]");
        } else {
            this.lblAccion.setText("[Editar]");
        }
    }

    @Override
    public void setEstatus() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Object getInformacion() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean setComboBoxInitial() {
        DefaultComboBoxModel x = new DefaultComboBoxModel();//Marca
        DefaultComboBoxModel cc = new DefaultComboBoxModel();//Coleccion
        DefaultComboBoxModel t = new DefaultComboBoxModel();//Tipo producto
        DefaultComboBoxModel m = new DefaultComboBoxModel();//Material
        DefaultComboBoxModel c = new DefaultComboBoxModel();//Color
        try {
            //Declaración de controladoras
            ctrlconfMarca marca = new ctrlconfMarca();
            ctrlconfColeccion coleccion = new ctrlconfColeccion();
            CtrlConfTipoProducto producto = new CtrlConfTipoProducto();
            CtrlConfMaterial material = new CtrlConfMaterial();
            CtrlConfColor color = new CtrlConfColor();
            //Carga de cada una de los combos       
            ArrayList<Object> lista = marca.ConsultaCompleja();
            ArrayList<Object> listaCc = coleccion.ConsultaCompleja();
            ArrayList<Object> listaT = producto.ConsultaCompleja();
            ArrayList<Object> listaM = material.ConsultaCompleja();
            ArrayList<Object> listaC = color.ConsultaCompleja();
            if (this.idAccion == 0) {
                //leyenda seleccionar
                //<editor-fold defaultstate="collapsed" desc="Carga al agregar">
                //Cargamos Marca
                x.addElement("SELECCIONA");
                for (int i = 0; i < lista.size(); i++) {
                    ConfMarca tempObject = (ConfMarca) lista.get(i);
                    x.addElement(tempObject);
                }
                cmbEstado.setModel(x);
                //Cargamos Tipoproducto
                t.addElement("SELECCIONA");
                for (int i = 0; i < listaT.size(); i++) {
                    ConfTipoProducto tempObject = (ConfTipoProducto) listaT.get(i);
                    t.addElement(tempObject);
                }
                this.cmbTipoProducto.setModel(t);
                //Cargamos Material
                m.addElement("SELECCIONA");
                for (int i = 0; i < listaT.size(); i++) {
                    ConfMaterial tempObject = (ConfMaterial) listaM.get(i);
                    m.addElement(tempObject);
                }
                this.cmbMaterial.setModel(m);
                //Cargamos Color
                c.addElement("SELECCIONA");
                for (int i = 0; i < listaC.size(); i++) {
                    ConfColor tempObject = (ConfColor) listaC.get(i);
                    c.addElement(tempObject);
                }
                this.cmbColor.setModel(c);
                //</editor-fold>

            } else {
                //<editor-fold defaultstate="collapsed" desc="Carga al editar">
                for (int i = 0; i < lista.size(); i++) {
                    ConfMarca tempObject = (ConfMarca) lista.get(i);
                    x.addElement(tempObject);
                }
                cmbEstado.setModel(x);

                //Cargamos Tipo Producto
                for (int i = 0; i < listaT.size(); i++) {
                    ConfTipoProducto tempObject = (ConfTipoProducto) listaT.get(i);
                    t.addElement(tempObject);
                }
                this.cmbTipoProducto.setModel(t);
                //Cargamos Color
                for (int i = 0; i < listaC.size(); i++) {
                    ConfColor tempObject = (ConfColor) listaC.get(i);
                    c.addElement(tempObject);
                }
                this.cmbColor.setModel(c);
                //Cargamos Material
                for (int i = 0; i < listaT.size(); i++) {
                    ConfMaterial tempObject = (ConfMaterial) listaM.get(i);
                    m.addElement(tempObject);
                }
                this.cmbMaterial.setModel(m);

                //</editor-fold>
            }
            //Llamamos al seleccionador
            this.setComboBox();
            this.setDependientBox();
            return true;
        } catch (SQLException ex) {
            Logger.getLogger(JdProductoManager.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }

    }

    @Override
    public boolean setLoadInformation() {
        this.setInformacion(this.idAccion);
        if (this.setComboBoxInitial() == false) {
            this.dispose();
        }
        this.setTextField();
        this.setComboBox();
        this.setTabla();
        this.setFecha();
        this.setCheck();
        this.setExtra();

        return true;
    }

    @Override
    public void setComboBox() {

        if (this.idAccion > 0) {
            //<editor-fold defaultstate="collapsed" desc="Asignación de valores correspondientes a combos">
            //Cargamos tipoProducto
            for (int i = 0; i < this.cmbTipoProducto.getItemCount(); i++) {
                ConfTipoProducto objTemp = (ConfTipoProducto) this.cmbTipoProducto.getItemAt(i);
                if (this.idTipoProducto == objTemp.getId()) {
                    this.cmbTipoProducto.setSelectedIndex(i);
                }
            }
            //Cargamos Material
            for (int i = 0; i < this.cmbMaterial.getItemCount(); i++) {
                ConfMaterial objTemp = (ConfMaterial) this.cmbMaterial.getItemAt(i);
                if (this.idMaterial == objTemp.getId()) {
                    this.cmbEstado.setSelectedIndex(i);
                }
            }
            //Cargamos Color
            for (int i = 0; i < this.cmbColor.getItemCount(); i++) {
                ConfColor objTemp = (ConfColor) this.cmbColor.getItemAt(i);
                if (this.idColor == objTemp.getId()) {
                    this.cmbColor.setSelectedIndex(i);
                }
            }
            if (this.idAccion > 0) {
                for (int i = 0; i < this.cmbEstado.getItemCount(); i++) {
                    ConfMarca objTemp4 = (ConfMarca) this.cmbEstado.getItemAt(i);
                    if (this.asignasela == objTemp4.getId()) {
                        this.cmbEstado.setSelectedItem(objTemp4);
                        this.cmbEstado.setSelectedIndex(i);
//                        JOptionPane.showMessageDialog(null,"Aparecera en el combo el valor de: "+objTemp4);

                    }
                }
            }
        }
        this.setDependientBox();
        //</editor-fold>

    }

    @Override
    public void setTextField() {
        this.txtValor.setText(((this.baseEntity != null) ? this.baseEntity.getStrValor() : " "));
        this.txtDescripcion.setText(((this.baseEntity != null) ? this.baseEntity.getStrDescripcion() : " "));
        this.txtCosto.setText(((this.baseEntity != null) ? String.valueOf(this.baseEntity.getCurPrecio()) : " "));

    }

    @Override
    public void setFecha() {

    }

    @Override
    public void setTabla() {

    }

    @Override
    public void setCheck() {

    }

    @Override
    public void setRadio() {

    }

    @Override
    public void setExtra() {

    }

    @Override
    public void huboCambio() {
        this.conCambios = true;
    }

    public void Clear_Combo() {
        int itemCount = cmbColeccion.getItemCount();
        for (int i = 0; i < itemCount; i++) {
            cmbColeccion.removeItemAt(0);
        }
        setDependientBox();

    }

    public void setDependientBox() {

        DefaultComboBoxModel xy = new DefaultComboBoxModel();
        try {
            ctrlconfColeccion coleccioni = new ctrlconfColeccion();
            ArrayList<Object> lista = coleccioni.ConsultaCompleja(this.idEstado);
            if (this.idAccion == 0) {
                //leyenda seleccionar
                xy.addElement("SELECCIONA");
                for (int i = 0; i < lista.size(); i++) {
                    ConfColeccion tempObject = (ConfColeccion) lista.get(i);
                    xy.addElement(tempObject);
                }
                cmbColeccion.setModel(xy);
            } else {

                for (int i = 0; i < lista.size(); i++) {
                    ConfColeccion tempObject = (ConfColeccion) lista.get(i);
                    xy.addElement(tempObject);
                }

                //Selecciona el combo box correspondiente de municipio
            }
            cmbColeccion.setModel(xy);

            if (this.idColeccion > 0) {

                for (int i = 0; i < this.cmbColeccion.getItemCount(); i++) {
                    ConfColeccion objTemp = (ConfColeccion) this.cmbColeccion.getItemAt(i);
                    if (this.idColeccion == objTemp.getId()) {
                        this.cmbColeccion.setSelectedIndex(i);
                    }

                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(JdProductoManager.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //<editor-fold defaultstate="collapsed" desc="Detecta cambio combo: Evento multiple">
    //Se realiza la creación de eventos detecta cambio en combos en el orden inverso en el que se muestran en la GUI
    private void DetectaCambioCombo() {
        if (this.idAccion == 0) {
            if (this.cmbTipoProducto.getSelectedIndex() >= 0) {
                this.camCombo = true;
            }

        } else if (this.idAccion > 0) {

            ConfTipoProducto x = (ConfTipoProducto) cmbTipoProducto.getSelectedItem();
            System.out.println(x.getId() + this.baseEntity.getIdConfTipoProducto());
            if (x.getId() != this.baseEntity.getIdConfTipoProducto()) {
                this.camCombo = true;
            }
        }
    }

    private void DetectaCambioCombo1() {
        if (this.idAccion == 0) {
            if (this.cmbColor.getSelectedIndex() >= 0) {
                this.camCombo = true;
            }

        } else if (this.idAccion > 0) {

            ConfColor x = (ConfColor) cmbColor.getSelectedItem();
            System.out.println(x.getId() + this.baseEntity.getIdConfColor());
            if (x.getId() != this.baseEntity.getIdConfColor()) {
                this.camCombo = true;
            }
        }
    }

    private void DetectaCambioCombo2() {
        if (this.idAccion == 0) {
            if (this.cmbMaterial.getSelectedIndex() >= 0) {
                this.camCombo = true;
            }

        } else if (this.idAccion > 0) {

            ConfMaterial x = (ConfMaterial) cmbMaterial.getSelectedItem();
            System.out.println(x.getId() + this.baseEntity.getIdConfMaterial());
            if (x.getId() != this.baseEntity.getIdConfMaterial()) {
                this.camCombo = true;
            }
        }
    }

    private void DetectaCambioCombo3() {
        if (this.idAccion == 0) {
            if (this.cmbColeccion.getSelectedIndex() >= 0) {
                this.camCombo = true;
            }

        } else if (this.idAccion > 0) {

            ConfColeccion x = (ConfColeccion) cmbColeccion.getSelectedItem();
            System.out.println(x.getId() + this.baseEntity.getIdConfColeccion());
            if (x.getId() != this.baseEntity.getIdConfColeccion()) {
                this.camCombo = true;
            }
        }
    }

    private void DetectaCambioCombo4() {
        if (this.idAccion == 0) {
            if (this.cmbEstado.getSelectedIndex() >= 0) {
                this.camCombo = true;
            }

        } else if (this.idAccion > 0) {

            ConfMarca x = (ConfMarca) cmbEstado.getSelectedItem();
            System.out.println(x.getId() + this.baseEntity.getIdConfMarca());
            if (x.getId() != this.baseEntity.getIdConfMarca()) {
                this.camCombo = true;
            }
        }
    }

    private void AccesDCCS() {
        this.DetectaCambioCombo();
        this.DetectaCambioCombo1();
        this.DetectaCambioCombo2();
        this.DetectaCambioCombo3();
        this.DetectaCambioCombo4();
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Detecta cambio JTArea">
    private void DetectaCambioJTArea(JTextArea txt) {
        DocumentListener documentListener = new DocumentListener() {

            @Override
            public void changedUpdate(DocumentEvent documentEvent) {
                camTxt = true;
            }

            @Override
            public void insertUpdate(DocumentEvent documentEvent) {
                camTxt = true;
            }

            @Override
            public void removeUpdate(DocumentEvent documentEvent) {
                camTxt = true;
            }
        };
        txt.getDocument().addDocumentListener(documentListener);
    }
//</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Detecta cambio JTField ">
    private void DetectaCambio(JTextField txt) {
        DocumentListener documentListener = new DocumentListener() {

            @Override
            public void changedUpdate(DocumentEvent documentEvent) {
                camTxt = true;
            }

            @Override
            public void insertUpdate(DocumentEvent documentEvent) {
                camTxt = true;
            }

            @Override
            public void removeUpdate(DocumentEvent documentEvent) {
                camTxt = true;
            }
        };
        txt.getDocument().addDocumentListener(documentListener);

    }
    //</editor-fold>
//</editor-fold>  
    //</editor-fold>
}
